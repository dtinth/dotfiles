#!/bin/bash
set -eo pipefail
ARCH=$(uname -m)

if test -e /opt/homebrew/bin
then
  PATH=/opt/homebrew/bin:$PATH
fi

main() {
  ensure  check_pnpm      install_pnpm
  ensure  check_direnv    install_direnv
  ensure  check_fish      install_fish
  ensure  check_starship  install_starship
  ensure  check_fzf       install_fzf
  ensure  check_gh        install_gh
  ensure  check_bat       install_bat
  install_enqueued_apt_packages
  recheck_commands

  ensure  check_fisher    install_fisher
  ensure  check_fish_git  install_fish_git
  recheck_commands

  setup_git_config
  setup_tmux_config
}

check_pnpm() {
  command_exists pnpm || test -e ~/.local/share/pnpm
}
install_pnpm() {
  if command_exists brew; then
    brew install pnpm
  else
    curl -fsSL https://get.pnpm.io/install.sh | env SHELL=fish sh -
    env SHELL=bash ~/.local/share/pnpm/pnpm setup
  fi
}

check_direnv() {
  command_exists direnv
}
install_direnv() {
  if command_exists brew; then
    brew install direnv
  elif command_exists apt-get; then
    install_apt_package direnv
  fi
}

check_fish() {
  command_exists fish
}
install_fish() {
  if command_exists brew; then
    brew install fish
  elif command_exists apt-get; then
    install_apt_package fish
  fi
}

check_fisher() {
  test -f ~/.config/fish/functions/fisher.fish
}
install_fisher() {
  fish -c 'curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher'
}

check_starship() {
  command_exists starship
}
install_starship() {
  if command_exists brew; then
    brew install starship
  elif test -n "$PREFIX" && test "$ARCH" = aarch64; then
    sh -c "$(curl -fsSL https://starship.rs/install.sh)" -- -y --bin-dir "$PREFIX/bin"
  else
    sudo sh -c "$(curl -fsSL https://starship.rs/install.sh)" -- -y
  fi
}

check_fzf() {
  command_exists fzf
}
install_fzf() {
  if command_exists brew; then
    brew install fzf
  elif command_exists apt-get; then
    install_apt_package fzf
  fi
}

check_fish_git() {
  test -f ~/.config/fish/conf.d/git.fish
}
install_fish_git() {
  fish -c 'fisher install jhillyerd/plugin-git'
}

check_gh() {
  command_exists gh
}
install_gh() {
  if command_exists brew; then
    brew install gh
  elif command_exists pkg; then
    pkg install gh -y
  elif command_exists apt-get; then
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    sudo apt-get update
    install_apt_package gh
  fi
}

check_bat() {
  command_exists bat
}
install_bat() {
  if command_exists brew; then
    brew install bat
  elif command_exists pkg; then
    pkg install bat -y
  elif command_exists apt-get; then
    if test "$ARCH" = armv7l; then
      wget -O/tmp/bat.deb https://github.com/sharkdp/bat/releases/download/v0.18.3/bat_0.18.3_armhf.deb
    elif test "$ARCH" = aarch64; then
      wget -O/tmp/bat.deb https://github.com/sharkdp/bat/releases/download/v0.18.3/bat_0.18.3_arm64.deb
    else
      wget -O/tmp/bat.deb https://github.com/sharkdp/bat/releases/download/v0.18.3/bat_0.18.3_amd64.deb
    fi
    install_apt_package /tmp/bat.deb
  fi
  if ! command_exists bat && test -f /usr/bin/batcat; then
    sudo ln -s /usr/bin/batcat /usr/local/bin/bat
  fi
}

setup_git_config() {
  # Only allow fast-forwards when pulling.
  git config --global pull.ff only

  # Make the default branch name "main".
  git config --global init.defaultBranch main

  # If username and email are not set, set some defaults.
  if ! git config --global --get user.name; then
    git config --global user.name "dtinth on $(hostname)"
    git config --global user.email "dtinth@users.noreply.github.com"
  fi
}
setup_tmux_config() {
  # Load ~/dotfiles/tmux/tmux.conf
  if ! grep -q 'source-file ~/dotfiles/tmux/tmux.conf' ~/.tmux.conf; then
    echo 'source-file ~/dotfiles/tmux/tmux.conf' >> ~/.tmux.conf
  fi
}

commands_to_recheck=()
ensure() {
  if ! "$1"; then
    echo >&2 "=> $1 failed, running $2..."
    "$2"
  fi
  commands_to_recheck+=("$1")
}
recheck_commands() {
  for command in "${commands_to_recheck[@]}"; do
    if ! "$command"; then
      echo >&2 "=> $command failed, exiting..."
      exit 1
    fi
  done
  commands_to_recheck=()
}

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

apt_packages_to_install=()
apt_updated=
install_apt_package() {
  if [ -z "$apt_updated" ]; then
    sudo apt-get update || true
    apt_updated=1
  fi
  apt_packages_to_install+=("$1")
}
install_enqueued_apt_packages() {
  if [ "${#apt_packages_to_install[@]}" -gt 0 ]; then
    sudo apt-get install -y "${apt_packages_to_install[@]}"
    apt_packages_to_install=()
  fi
}

main
